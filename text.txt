PRAC 1: Write a Block chain for sum of two numbers.
blockchain.js
const c = require('crypto')

class Block {
    constructor(i, t, n1, n2, ph = '') {
        this.i = i;
        this.t = t;
        this.n1 = n1;
        this.n2 = n2;
        this.sum = n1 + n2;
        this.ph = ph;
        this.h = this.calHash();
    }
    calHash() {
        return c.createHash('sha256').update(this.i + this.t + this.sum + this.ph).digest('hex');
    }
}


class Blockchain {
    constructor() {
        this.chain = [this.createGBlock()];
    }
    
    createGBlock() {
        return new Block(0, '01/08/2024', 0, 0, '0');
    }
    
    getCBlock() {
        return this.chain[this.chain.length - 1];
    }

    addBlock(nb) {
        nb.ph = this.getCBlock().h;
        nb.h = nb.calHash();
        this.chain.push(nb);
    }
}

module.exports.Block = Block;
module.exports.Blockchain = Blockchain;

#############################
test.js
const {b, bc, Blockchain, Block } = require('./blockchain');

let mb = new Blockchain();
console.log("Developed By - Bhushan Gholekar 31031523009");
console.log("First Transaction");

mb.addBlock(new Block(1, '01/08/2024', 23, 5));
console.log(JSON.stringify(mb, null, 3));

########################################################################################
PRAC 2:  Write a program to create blockchain creating factorial of number.
blockchain2.js
const c = require('crypto')

class Block {
    constructor(i, t, n, ph = '') {
        this.i = i;
        this.t = t;
        this.n = n;
        this.fact=this.factorial(n);
        this.ph = ph;
        this.h = this.calHash();
    }
    
    factorial(n) {
        let ans = 1;
        if(n === 0)
            return 1;
        for (let i = 2; i <= n; i++)
            ans = ans * i;
        return ans;
    }
    
    calHash() {
        return c.createHash('sha256').update(this.i + this.t + this.fact + this.ph).digest('hex');
    }
}


class Blockchain {
    constructor() {
        this.chain = [this.createGBlock()];
    }
    createGBlock() {
        return new Block(0, new Date(), 0, 0, '0');
    }
    getCBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(nb) {
        nb.ph = this.getCBlock().h;
        nb.h = nb.calHash();
        this.chain.push(nb);
    }
}

module.exports.Block = Block;
module.exports.Blockchain = Blockchain;

#######################
test.js
const { b, bc, Blockchain, Block } = require('./blockchain2')

let mb = new Blockchain();
console.log("Developed By - Bhushan Gholekar 31031523009")
console.log("First Transaction")

mb.addBlock(new Block(1, new Date(), 6));
mb.addBlock(new Block(2, new Date(), 5));
mb.addBlock(new Block(3, new Date(), 3));

console.log(JSON.stringify(mb, null, 3));
##########################################################################

PRAC 3: Creating a simple blockchain to check and validate for Kaprekar number.
kaprekar.js
####
const c = require('crypto')

class Block {
    constructor(i, t, n, ph = '') {
        this.i = i;
        this.t = t;
        this.n = n;
        this.kaprekar = this.kap();
        this.ph = ph;
        this.h = this.calHash();
    }
    
    kap() {
        let n1 = this.n;
        let sq = n1 * n1;
        let s = 0;
        let c = 0;
        
        while (sq != 0) {
            // let r = sq % 10;
            c = c + 1;
            sq = Math.floor(sq / 10);
        }
        
        for (let i = 1; i < c; i++) {
            let sq1 = n1 * n1;
            s = 0;
            while (sq1 != 0) {
                let r = sq1 % Math.pow(10, i);
                s = s + r;
                sq1 = Math.floor(sq1 / Math.pow(10, i));
            }
            
            if (this.n == s) {
                // return "Kaprekar Number";
                this.kaprekar = "Kaprekar Number";
                break;
            }
            else {
                // return "Not Kaprekar Number";
                this.kaprekar = "Not a Kaprekar Number";
            }
        }
        return this.kaprekar;
    }
    
    calHash() {
        return c.createHash('sha256').update(this.i + this.t + this.kaprekar + this.ph).digest('hex');
    }
}


class Blockchain {
    constructor() {
        this.chain = [this.createGBlock()];
    }
    
    createGBlock() {
        return new Block(0, new Date(), 0, '0');
    }
    getCBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(nb) {
        nb.ph = this.getCBlock().h;
        nb.h = nb.calHash();
        this.chain.push(nb);
    }
    validate() {
        for (let i = 1; i < this.chain.length; i++) {
            let cb = this.chain[i]
            let pb = this.chain[i - 1]
            
            if (cb.h != cb.calHash()) {
                return false;
            }
            if (pb.h != cb.ph) {
                return false;
            }
        }
        return true;
    }
}

module.exports.Block = Block;
module.exports.Blockchain = Blockchain;

###################
test.js

const { b, bc, Blockchain, Block } = require('./kaprekar')

let mb = new Blockchain();
console.log("Developed By - Bhushan Gholekar 31031523009")
console.log("First Transaction")

mb.addBlock(new Block(2, new Date(), 45));

mb.addBlock(new Block(2, new Date(), 46));
console.log(mb.validate());

console.log(JSON.stringify(mb, null, 3));
###############################################################################

PRAC 4: Aim: Create a simple blockchain to store only automorphic number also secure
your automorphic number by applying DES algorithm and also validate the
block before adding it to the blockchain.

morp.js
#############
const crypto = require('crypto');

class Block {
    constructor(i, t, n, ph = '') {
        this.i = i;
        this.t = t;
        this.n = this.encryptAES(n);
        this.ph = ph;
        this.f = this.isAutomorphic();
        this.h = this.calhash();
    }
    isAutomorphic() {
        let n = this.decryptAES(this.n);
        let sq = n * n;
        let c = 0;
        let flag = false;
        
        if (sq !== 0) {
            while (sq !== 0) {
                c = c + 1;
                sq = Math.floor(sq / 10);
            }
            for (let i = 1; i < c; i++) {
                let sq1 = n * n;
                let r = sq1 % Math.pow(10, i);
                if (n === r) {
                    flag = true;
                    break;
                } else {
                    flag = false;
                }
            }
            this.f = flag ? "Automorphic" : "Not Automorphic";
        } else {
            this.f = "Automorphic";
        }
        return this.f;
    }
    
    calhash() {
        return crypto.createHash('sha256').update(this.i + this.t + this.n + this.ph).digest('hex');
    }
    encryptAES(text) {
        const key = crypto.scryptSync('password', 'salt', 32);
        const iv = crypto.randomBytes(16);
        const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
        let encrypted = cipher.update(text.toString(), 'utf8', 'hex');
        encrypted += cipher.final('hex');
        return iv.toString('hex') + ':' + encrypted;
    }
    
    decryptAES(encryptedText) {
        const key = crypto.scryptSync('password', 'salt', 32);
        const parts = encryptedText.split(':');
        const iv = Buffer.from(parts.shift(), 'hex');
        const encrypted = parts.join(':');
        const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
        let decrypted = decipher.update(encrypted, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return parseInt(decrypted, 10);
    }
}

class Blockchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
    }
    createGenesisBlock() {
        return new Block(0, '07-08-24', 0, '0');
    }
    getCurrentBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(newBlock) {
        if (newBlock.isAutomorphic() === "Automorphic") {
            newBlock.ph = this.getCurrentBlock().h;
            newBlock.h = newBlock.calhash();
            this.chain.push(newBlock);
        }
    }
    validate() {
        for (let i = 1; i < this.chain.length; i++) {
            let cb = this.chain[i];
            let pb = this.chain[i - 1];
            if (cb.h !== cb.calhash()) {
                return false;
            }
            if (pb.h !== cb.ph) {
                return false;
            }
        }
        return true;
    }
}

module.exports.Block = Block;
module.exports.Blockchain = Blockchain

###########
test.js

const { b, bc, Blockchain, Block } = require('./morp')

let mb = new Blockchain();
console.log("Developed By - BHUSHAN GHOLEKAR 31031523009")
console.log("First Transaction")

mb.addBlock(new Block(25, new Date(), 23));
console.log(JSON.stringify(mb, null, 3));

#########################################################################
PRAC 5: To Create a transaction operation in blockchain
trans.js
########
const c = require('crypto')

class Block {
    constructor(i, t, op, m, b = 0, ph = '') {
        this.i = i;
        this.t = t;
        this.op = op;
        this.m = m;
        this.b = m;
        this.ph = ph;
        this.h = this.calHash();
    }
    
    calHash() {
        return c.createHash('sha256').update(this.i + this.t + this.op + this.b + this.ph).digest('hex');
    }
}


class Blockchain {
    constructor() {
        this.chain = [this.createGBlock()];
    }
    
    createGBlock() {
        return new Block(0, new Date(), 'D', 1000, 0, '0');
    }
    getCBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(nb) {
        nb.ph = this.getCBlock().h;
        if (nb.op == "D") {
            nb.b = this.getCBlock().b + nb.m;
        }
        else if (nb.op == "W") {
            if (this.getCBlock().b > nb.m) {
                nb.b = this.getCBlock().b - nb.m;
            }
            else {
                nb.b = this.getCBlock().b;
            }
        }
        else {
            console.log("Not a Valid Operation.")
        }
        nb.h = nb.calHash();
        this.chain.push(nb);
    }
    
    validate() {
        for (let i = 1; i < this.chain.length; i++) {
            let cb = this.chain[i]
            let pb = this.chain[i - 1]
            if (cb.h != cb.calHash()) {
                return false;
            }
            if (pb.h != cb.ph) {
                return false;
            }
        }
        return true;
    }
}

module.exports.Block = Block;
module.exports.Blockchain = Blockchain;

#########
test.js
const { Blockchain, Block } = require('./trans')

let mb;
console.log("Developed by Bhushan Gholekar - 31031523009")

const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

readline.question('Type D-Deposit or W-Withdraw: ', DW => {
    readline.question('Enter Amount: ', m => {
        mb = new Blockchain();
        mb.addBlock(new Block(1, new Date(), DW, parseInt(m)));
        console.log(JSON.stringify(mb, null, 3))
        readline.close();
    });
});

// mb.addBlock(new Block(1, new Date(), 'D', 500))
// mb.addBlock(new Block(2, new Date(), 'W', 250))


############################################################################
PRAC 6: write a simple auction contract where a user can bid an highest bid
//SPDX-License-Identifier:MIT
pragma solidity ^0.8.0;

contract AuctionC {
    address public o;
    uint public hb;
    address public hba;
    bool public oe;

    constructor(){
        o=msg.sender;
        hb=0;
        oe=false;
    }

    function bid(uint a) public  { 
        require(!oe, "Auction has already ended");
        require (a<hb, "Bid must be greater then current value");
        hb=a;
        hba=msg.sender;
    }

    function endA() public {
        require(msg.sender==o, "Only the owner can end");
        oe=true;
    }

    function withdraw() public view returns (uint256) {
        require(msg.sender==hba, "Only Highest Bider can withdraw");
        return hb;
    }

##############################################################################
PRAC 7:
A] Write a program to create Smart contract to create a factorial. 
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract factorial {
    function fact(uint256 a) public pure returns (uint256) {
        uint256 ans = 1;
        for (uint256 i = 2;i <=a;i++){
            ans = ans*i;
        }
        return ans;
    }
}

B] Write a program to create Smart contract to find nth fibonacci series.
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract fibonacci {
    function fib(uint256 a) public pure returns (uint256) {
        uint256 n1 = 0;
        uint256 n2 = 1;
        uint n3;
        for (uint256 i = 3;i <= a;i++){
            n3 = n1 + n2;
            n1=n2;
            n2=n3;
        }
        return n3;
    }
}

C] Write a program to create Smart contract to find if given number is prime or not.
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract primeno{
    function prime(uint256 a) public pure returns (bool){
        for (uint256 i=2;i <a;i++){
            if (a%i == 0) {
                return false;
            }
        }
    return true;
    }
}

D] Write a program to create Smart contract for deposit and withdrawal of money
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract banking{
    address public s;
    uint256 public bal;

    constructor(){
        s = msg.sender;
        bal = 0;
    }

    function deposit(uint a) public {
        bal = bal +a;
        s=msg.sender;
    }

    function withdraw(uint a) public {
        if (bal>a) {
            bal = bal-a;
            s=msg.sender;
        }
    }
}

###########################################################################
PRAC 8: 
A] Write a smart contract to find mean of numbers.
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MeanNo{
    function means(uint[] memory c) public pure returns(uint) {
        //uint[3] memory c = [uint(1), 2, 3];
        uint res = 0;
        for (uint i = 0; i < c.length; i++) {
            res = res + c[i];
        }
        uint mean = res/c.length;

        return mean;
    }
}

B] Write a smart contract to find median of given array
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MedianNo{ 
    function median(uint256[] memory arr) public pure returns (uint256){
        uint256 n = arr.length;
        for (uint256 i = 0; i < n - 1; i++){
            for(uint256 j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);
                }
            }
        }
    
    uint256 med;
    if ( n % 2 ==0){
        med = (arr[n / 2 - 1] + arr[n / 2]) /2;
    }else {
        med = arr[n / 2];
    }

    return med;
    }
}

C] Aim: Write a smart contract to create a student portal with registering their name, student id and their address.
//SPDX-License-Identifier:MIT
pragma solidity ^0.8.0;

contract portal{
    struct std{
        uint sid;
        string sname;
        address add;
    }

    mapping (uint256 => std) public sl;
    function registerS(uint i, string memory n) public{


        sl[i].sname = n;
        sl[i].add = msg.sender;
        sl[i].sid = i;

    }
}

D] Write a smart contract to create a student portal with student id, name, address, marks, percentage and grade.
//SPDX-License-Identifier:MIT
pragma solidity ^0.8.0;


contract StudentC{
    struct std{
        uint sid;
        string name;
        address addr;
        uint BCT;
        uint ML;
        uint BDA;
        uint percent;
        string grade;
    }


    mapping(uint256 => std) public student;
    function register(uint i, string memory n, uint b, uint m, uint a)

public{
        student[i].name = n;
        student[i].addr = msg.sender;
        student[i].sid = i;
        student[i].BCT = b;
        student[i].ML = m;
        student[i].BDA = a;
        
        uint p = (b + m + a) / 3;
        student[i].percent = p;

        if(p >= 80){
            student[i].grade = "O";
        }
        else if (p >= 60 && p < 80){
            student[i].grade = "A";
        }
        else if(p >= 40 && p < 60){
            student[i].grade = "B";
        }
        else {
            student[i].grade = "F";
        }
    }
}

#############################################################################
PRAC 9: Write a smart contract for voting application.
//SPDX-License-Identifier: MIT 
pragma solidity ^0.8.0;

contract votingC{
    mapping(address => bool) public voters;
    mapping(string => uint256) public c;
    mapping(string => uint256) public p;
    string[] public cn;

    constructor(string[] memory candN) {
        cn = candN;
    }

    function vote(string memory caNm) public {
        require(!voters[msg.sender], ("Voting already done"));
        bool ce = false;
        for (uint256 i=0; i < cn.length; i++){
            if (keccak256(bytes(caNm)) == keccak256(bytes(cn[i]))) {
                ce = true;
                break;
            }
        }
        require (ce, "Candidate does not exist");
        c[caNm]++;
        voters[msg.sender] = true;
    }

    function getvoterC(string memory canM) public view returns (uint256){
        return c[canM];
    }

    function getWinnerC() public view returns(string memory){
        string memory winner;
        uint256 temp;
        for (uint256 i = 0; i < cn.length; i++) {
            if(getvoterC(cn[i]) > temp){
                temp = getvoterC(cn[i]);
                winner = cn[i];

            }
        }
        return winner;
    }

    function showPercentage(string memory canM) public view returns(uint256){
        uint total;
        for(uint256 i = 0; i < cn.length; i++) {
            total = total + getvoterC(cn[i]);
        }

        uint per = getvoterC(canM) * (100/total);
        return per;
    }
}

#######################################################################################
PRAC 10:
A] Single Inheritance
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract singer{
    string n;
    string[2] songs;
    function setN(string memory a, string[2]memory arr) public {
        n = a;
        songs = arr;
    }
}

contract song is singer{
    function getVal() public view returns (string memory, string[2]memory){
        return (n,songs);
    }
}

contract test{
    song c = new song();
    function tInherit() public returns(string memory, string[2] memory){
        c.setN("Radiohead",["No surprises","Exit music (For a film)"]);
        return c.getVal();
    }
}


B] Multi Inheritance
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract college {
    string internal cname;
    string internal pname;
    
    function setCollege(string memory cn, string memory pn) public {
        cname = cn;
        pname = pn;
    }
}

contract student is college {
    string internal sname;
    uint internal rollno;
    function setStudent(string memory sn, uint rn) public {
        sname = sn;
        rollno = rn;
    }
}

contract exam is student {
    uint8[5] marks;
    
    function setMarks(uint8[5] memory m) public {
        marks = m;
    }
    
    function getPercentage() public view returns(uint) {

    }
    function getDetails() public view returns(string memory, string memory, string memory, uint, uint) {
        uint total = 0;
        for(uint i = 0; i < 5; i++) {
            total += marks[i];
        }
        uint per = total/5;
        return (cname, pname, sname, rollno, per);
    }
}


C] Multiple Inheritance
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract employee{
    string n;
    uint mid;
    uint sal;
    function setE(string memory a, uint b, uint c) public {
        n = a;
        mid = b;
        sal = c;
    }
}

contract department{
    string dep;
    function setD(string memory a) public {
        dep = a;
    }
}

contract salary is employee, department{
    uint HRA;
    function calHRA() public returns(uint){
        if (sal >= 15000){
            HRA = 5000;
        }
        else if(sal >= 25000){
            HRA = 10000;
        }
        else{
            HRA = 2000;
        }
        return HRA;
    }
    function getVal() public view returns (string memory, uint, uint,
    string memory, uint){
        return (n, mid, sal, dep, HRA);
    }
}

contract test{
    salary s = new salary();
    function tInherit() public returns(string memory, uint, uint, string memory, uint){
        s.setE("Mihir Nagda", 101, 15000);
        s.setD("CS");
        s.calHRA();
        return s.getVal();
    }
}

D] Hierarchical Inheritance
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract animal{
    uint legs;
    string color;
    function setA(uint a, string memory b) public {
        legs = a;
        color = b;
    }
}

contract dog is animal{
    string name;
    string species;
    function setVal(string memory a, string memory b) public {
        name = a;
        species = b;
    }
    function getVal() public view returns (uint, string memory, string memory, string memory){
        return (legs, color, name, species);
    }
}

contract cat is animal{
    string name;
    string species;
    function setVal(string memory a, string memory b) public {
        name = a;
        species = b;
    }
    function getVal() public view returns (uint, string memory, string memory, string memory){
        return (legs, color, name, species);
    }
}

contract test{
    dog d = new dog();
    cat c = new cat();
    function dInherit() public returns(uint, string memory, string memory,
    string memory){
        d.setA(4, "Brown");
        d.setVal("Tom", "Labrador");
        return d.getVal();
    }
    function cInherit() public returns(uint, string memory, string memory, string memory){
        c.setA(4, "White");
        c.setVal("Goldie", "Indie");

        return c.getVal();
    }
}
################################################
PRAC 13: Storing and Retrieving files using IPFS.
Step 1: Download and Install IPFS Desktop from here.
https://github.com/ipfs/ipfs-desktop

 Step2: Click on files and import a sample file.

Step 3: Click on 3 dots and copy CID

Step 4: Share the CID to someone else to open the shared file.  

Step 5: Click on import □ Import from IPFS

Step 6: The imported file will be visible.
const crypto = require('crypto');

class Block {
    constructor(index, timestamp, operation, amount, previousHash = '', balance) {
        this.index = index;
        this.timestamp = timestamp;
        this.operation = operation;
        this.amount = amount;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
    }
    
    calculateHash() {
        return crypto.createHash('sha256').update(this.index + this.timestamp + this.operation +   this.amount + this.previousHash + this.balance).digest('hex');
    }
}

class Finchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
    }
    createGenesisBlock() {
        return new Block(0, '01-08-24', 'Initial', '100', '0', '100');
    }
    getLatesttBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(operation, amount) {
        const latestBlock = this.getLatesttBlock();
        let newBalance = parseInt(latestBlock.balance);
        
        // Update balance based on operation
        if (operation === 'credit') {
            newBalance += parseInt(amount);
        } else if (operation === 'debit') {
            newBalance -= parseInt(amount);
        }

        const newBlock = new Block(
            latestBlock.index + 1,
            new Date().toISOString(),
            operation,
            amount,
            latestBlock.hash,
            newBalance.toString()
        );

        this.chain.push(newBlock);
    }

    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];

            if (currentBlock.hash !== currentBlock.calculateHash()) {
                return false;
            }

            if (currentBlock.previousHash !== previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
}


####################################################################################
